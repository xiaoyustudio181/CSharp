using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpLab
{
    public class Bitwise
    {
        public static void Test1()
        {
            #region 位运算
            /*一，二进制表示。
             * 值为5的int类型整数，在计算机中表示：
             * 00000000 00000000 00000000 00000101
             * 5的二进制是101，但int类型的数占用4字节(32位)，所以前面填了一堆0。
             * 二，运算符。
             * 1，按位与(&)：a、b对应位同为1时结果为1，否则为0；
             * 2，按位或(|)：a、b对应位同为0时结果为0，否则为1；
             * 3，按位取反(~)(按位非)：1改为0，0改为1；
             * 4，按位异或(^)：a、b对应位相同时结果为0，否则为1；
             * 5，移位：
             * (1)左移(<<)，将数字在内存中的二进制数据左移指定位数，右边移空的部分补0；
             * (2)右移(>>)，将数字在内存中的二进制数据右移指定位数，若最左位是0，移空的位补0；若最左位是1，移空的位补1；
             * [Java](3)无符号右移(>>>)，将数字在内存中的二进制数据右移指定的位数，不论最左位是0还是1，移空的位都补0。
             * 三，负数的二进制。
             * 计算机中，负数以其正值的补码形式表达。
             * 原码：一个整数，按照绝对值大小转换成的二进制数，称为原码。
             * 反码：将二进制数按位取反(~)，所得的新二进制数称为原二进制数的反码。
             * 补码：反码加1称为补码。
             * 00000000 00000000 00000000 00000101 原码
             * 11111111 11111111 11111111 11111010 反码
             * 11111111 11111111 11111111 11111011 补码(即-5) */
            #endregion
            //42: 101010
            //50: 110010
            Console.WriteLine("42&50: {0}", 42 & 50);//34
            // &  100010: 34
            Console.WriteLine("42|50: {0}", 42 | 50);//58
            //  |   111010: 58
            Console.WriteLine("42^50: {0}", 42 ^ 50);//24
            // ^  011000:  24
            Console.WriteLine();
            Console.WriteLine("42: {0}", Convert.ToString(42, 2));
            //42: 00000000 00000000 00000000 00101010
            Console.WriteLine("~42: {0}", Convert.ToString(~42, 2));
            //~42: 11111111 11111111 11111111 11010101 反码(-43)
            Console.WriteLine("~42: {0}", ~42);
            Console.WriteLine("~42+1: {0}", ~42 + 1);
            //~42+1: 11111111 11111111 11111111 11010110 补码(-42)
            Console.WriteLine();

            Console.WriteLine("42 << 2: {0}", 42 << 2);//168
            Console.WriteLine("42 << 2: {0}", Convert.ToString(42 << 2, 2));//10101000
            //42: 00000000 00000000 00000000 00101010 
            //      00000000 00000000 00000000 10101000 <<2: 168
            Console.WriteLine("168 >> 2: {0}", 168 >> 2);//42
            Console.WriteLine();

            //      00000000 00000000 00000000 00101010 >>2: 42
            Console.WriteLine("-1 << 3: {0}", -1 << 3);//-8
            Console.WriteLine("-1 << 3: {0}", Convert.ToString(-1 << 3, 2));//
            //-1:  11111111 11111111 11111111 11111111 
            //      11111111 11111111 11111111 11111000 <<3
            Console.WriteLine("-8 >> 3: {0}", -8 >> 3);//-1
            //      11111111 11111111 11111111 11111111 >>3
        }
    }
}
